@model DiyProjectCalc.Core.Entities.ProjectAggregate.Material

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Material</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MeasurementType)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MeasurementType)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Length)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Length)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Width)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Width)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Depth)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Depth)
        </dd>
        <dt class = "col-sm-2">
            Quantity Needed 
        </dt>
        <dd class = "col-sm-10">
            @String.Format("{0:0.0}", Model.QuantityNeeded())
        </dd>    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id" asp-route-ProjectId="@ViewData["ProjectId"]">Edit</a> |
    <a asp-action="Index" asp-route-ProjectId="@ViewData["ProjectId"]">Back to List</a>
</div>
